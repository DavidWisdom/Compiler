Grammar

    0 $accept: Program $end

    1 Program: CompUnit

    2 CompUnit: CompUnit Decl
    3         | CompUnit FuncDef
    4         | Decl
    5         | FuncDef

    6 Decl: ConstDecl SEMICOLON
    7     | VarDecl SEMICOLON

    8 ConstDecl: CONST BType ConstDef
    9          | ConstDecl COMMA ConstDef

   10 BType: INTT
   11      | FLOATT

   12 ConstDef: IDENT ASSIGNN ConstInitVal
   13         | IDENT ArrayOpt ASSIGNN ConstInitArray

   14 ArrayOpt: LBRACKET ConstExp RBRACKET
   15         | ArrayOpt LBRACKET ConstExp RBRACKET

   16 ConstInitVal: ConstExp

   17 ConstInitArray: LBRACE RBRACE
   18               | LBRACE ConstArrayBody RBRACE

   19 ConstArrayBody: ConstArrayBody COMMA ConstInitArray
   20               | ConstArrayBody COMMA ConstInitVal
   21               | ConstInitArray
   22               | ConstInitVal

   23 VarDecl: BType VarDef
   24        | VarDecl COMMA VarDef

   25 VarDef: IDENT
   26       | IDENT ArrayOpt
   27       | IDENT ASSIGNN InitVal
   28       | IDENT ArrayOpt InitArray

   29 InitVal: Exp

   30 InitArray: LBRACE RBRACE
   31          | LBRACE InitArrayBody RBRACE

   32 InitArrayBody: InitArrayBody COMMA InitArray
   33              | InitArrayBody COMMA InitVal
   34              | InitArray
   35              | InitVal

   36 FuncDef: BType IDENT LPAREN FuncFParams RPAREN Block
   37        | BType IDENT LPAREN RPAREN Block
   38        | VOID IDENT LPAREN FuncFParams RPAREN Block
   39        | VOID IDENT LPAREN RPAREN Block

   40 FuncFParams: FuncFParam COMMA FuncFParam
   41            | FuncFParam

   42 FuncFParam: BType IDENT
   43           | BType IDENT ArrayOpt

   44 Block: LBRACE BlockItems RBRACE
   45      | LBRACE RBRACE

   46 BlockItems: BlockItem
   47           | BlockItems BlockItem

   48 BlockItem: Decl
   49          | Stmt

   50 Stmt: LVal ASSIGNN Exp SEMICOLON
   51     | Exp SEMICOLON
   52     | SEMICOLON
   53     | Block
   54     | IfStmt
   55     | WhileStmt
   56     | BreakStmt
   57     | ContinueStmt
   58     | ReturnStmt

   59 IfStmt: IF LPAREN Cond RPAREN Stmt
   60       | IF LPAREN Cond RPAREN Stmt ELSE Stmt

   61 WhileStmt: WHILE LPAREN Cond RPAREN Stmt

   62 BreakStmt: BREAK SEMICOLON

   63 ContinueStmt: CONTINUE SEMICOLON

   64 ReturnStmt: RETURN Exp SEMICOLON
   65           | RETURN SEMICOLON

   66 Exp: AddExp

   67 Cond: LOrExp

   68 LVal: IDENT
   69     | LVal LBRACKET Exp RBRACKET

   70 PrimaryExp: LPAREN Exp RPAREN
   71           | LVal
   72           | Number

   73 Number: INT_CONST
   74       | FLOAT_CONST

   75 UnaryExp: PrimaryExp
   76         | FuncCall
   77         | UnaryOp UnaryExp

   78 FuncCall: IDENT LPAREN FuncRParams RPAREN
   79         | IDENT LPAREN RPAREN

   80 UnaryOp: ADDD
   81        | SUBB
   82        | NOTT

   83 FuncRParams: Exp
   84            | FuncRParams COMMA Exp

   85 MulExp: UnaryExp
   86       | MulExp MulOp UnaryExp

   87 MulOp: MULL
   88      | DIVV
   89      | MODD

   90 AddExp: MulExp
   91       | AddExp AddOp MulExp

   92 AddOp: ADDD
   93      | SUBB

   94 RelExp: AddExp
   95       | RelExp RelOp AddExp

   96 RelOp: GTT
   97      | GEQQ
   98      | LTT
   99      | LEQQ

  100 EqExp: RelExp
  101      | EqExp EQQ RelExp
  102      | EqExp NEQQ RelExp

  103 LAndExp: EqExp
  104        | LAndExp ANDD EqExp

  105 LOrExp: LAndExp
  106       | LOrExp ORR LAndExp

  107 ConstExp: AddExp


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENT <name> (258) 12 13 25 26 27 28 36 37 38 39 42 43 68 78 79
    INT_CONST <data> (259) 73
    FLOAT_CONST <data> (260) 74
    CONST (261) 8
    INTT (262) 10
    FLOATT (263) 11
    COMMA (264) 9 19 20 24 32 33 40 84
    SEMICOLON (265) 6 7 50 51 52 62 63 64 65
    LBRACE (266) 17 18 30 31 44 45
    RBRACE (267) 17 18 30 31 44 45
    LBRACKET (268) 14 15 69
    RBRACKET (269) 14 15 69
    LPAREN (270) 36 37 38 39 59 60 61 70 78 79
    RPAREN (271) 36 37 38 39 59 60 61 70 78 79
    ASSIGNN (272) 12 13 27 50
    VOID (273) 38 39
    IF (274) 59 60
    ELSE (275) 60
    WHILE (276) 61
    BREAK (277) 62
    CONTINUE (278) 63
    RETURN (279) 64 65
    ADDD <op> (280) 80 92
    SUBB <op> (281) 81 93
    MULL <op> (282) 87
    DIVV <op> (283) 88
    MODD <op> (284) 89
    GTT <op> (285) 96
    GEQQ <op> (286) 97
    LTT <op> (287) 98
    LEQQ <op> (288) 99
    EQQ <op> (289) 101
    NEQQ <op> (290) 102
    ANDD <op> (291) 104
    ORR <op> (292) 106
    NOTT <op> (293) 82
    LOWER_THAN_ELSE (294)


Nonterminals, with rules where they appear

    $accept (40)
        on left: 0
    Program (41)
        on left: 1
        on right: 0
    CompUnit <compUnit> (42)
        on left: 2 3 4 5
        on right: 1 2 3
    Decl <stmt> (43)
        on left: 6 7
        on right: 2 4 48
    ConstDecl <stmt> (44)
        on left: 8 9
        on right: 6 9
    BType <type> (45)
        on left: 10 11
        on right: 8 23 36 37 42 43
    ConstDef <stmt> (46)
        on left: 12 13
        on right: 8 9
    ArrayOpt (47)
        on left: 14 15
        on right: 13 15 26 28 43
    ConstInitVal (48)
        on left: 16
        on right: 12 20 22
    ConstInitArray (49)
        on left: 17 18
        on right: 13 19 21
    ConstArrayBody (50)
        on left: 19 20 21 22
        on right: 18 19 20
    VarDecl <stmt> (51)
        on left: 23 24
        on right: 7 24
    VarDef <stmt> (52)
        on left: 25 26 27 28
        on right: 23 24
    InitVal <stmt> (53)
        on left: 29
        on right: 27 33 35
    InitArray (54)
        on left: 30 31
        on right: 28 32 34
    InitArrayBody (55)
        on left: 32 33 34 35
        on right: 31 32 33
    FuncDef <stmt> (56)
        on left: 36 37 38 39
        on right: 3 5
    FuncFParams <stmt> (57)
        on left: 40 41
        on right: 36 38
    FuncFParam <stmt> (58)
        on left: 42 43
        on right: 40 41
    Block <stmt> (59)
        on left: 44 45
        on right: 36 37 38 39 53
    BlockItems <stmt> (60)
        on left: 46 47
        on right: 44 47
    BlockItem <stmt> (61)
        on left: 48 49
        on right: 46 47
    Stmt <stmt> (62)
        on left: 50 51 52 53 54 55 56 57 58
        on right: 49 59 60 61
    IfStmt <stmt> (63)
        on left: 59 60
        on right: 54
    WhileStmt <stmt> (64)
        on left: 61
        on right: 55
    BreakStmt <stmt> (65)
        on left: 62
        on right: 56
    ContinueStmt <stmt> (66)
        on left: 63
        on right: 57
    ReturnStmt <stmt> (67)
        on left: 64 65
        on right: 58
    Exp <stmt> (68)
        on left: 66
        on right: 29 50 51 64 69 70 83 84
    Cond <stmt> (69)
        on left: 67
        on right: 59 60 61
    LVal <stmt> (70)
        on left: 68 69
        on right: 50 69 71
    PrimaryExp <stmt> (71)
        on left: 70 71 72
        on right: 75
    Number <stmt> (72)
        on left: 73 74
        on right: 72
    UnaryExp <stmt> (73)
        on left: 75 76 77
        on right: 77 85 86
    FuncCall <stmt> (74)
        on left: 78 79
        on right: 76
    UnaryOp <op> (75)
        on left: 80 81 82
        on right: 77
    FuncRParams <stmt> (76)
        on left: 83 84
        on right: 78 84
    MulExp <stmt> (77)
        on left: 85 86
        on right: 86 90 91
    MulOp <op> (78)
        on left: 87 88 89
        on right: 86
    AddExp <stmt> (79)
        on left: 90 91
        on right: 66 91 94 95 107
    AddOp <op> (80)
        on left: 92 93
        on right: 91
    RelExp <stmt> (81)
        on left: 94 95
        on right: 95 100 101 102
    RelOp <op> (82)
        on left: 96 97 98 99
        on right: 95
    EqExp <stmt> (83)
        on left: 100 101 102
        on right: 101 102 103 104
    LAndExp <stmt> (84)
        on left: 103 104
        on right: 104 105 106
    LOrExp <stmt> (85)
        on left: 105 106
        on right: 67 106
    ConstExp (86)
        on left: 107
        on right: 14 15 16


State 0

    0 $accept: • Program $end

    CONST   shift, and go to state 1
    INTT    shift, and go to state 2
    FLOATT  shift, and go to state 3
    VOID    shift, and go to state 4

    Program    go to state 5
    CompUnit   go to state 6
    Decl       go to state 7
    ConstDecl  go to state 8
    BType      go to state 9
    VarDecl    go to state 10
    FuncDef    go to state 11


State 1

    8 ConstDecl: CONST • BType ConstDef

    INTT    shift, and go to state 2
    FLOATT  shift, and go to state 3

    BType  go to state 12


State 2

   10 BType: INTT •

    $default  reduce using rule 10 (BType)


State 3

   11 BType: FLOATT •

    $default  reduce using rule 11 (BType)


State 4

   38 FuncDef: VOID • IDENT LPAREN FuncFParams RPAREN Block
   39        | VOID • IDENT LPAREN RPAREN Block

    IDENT  shift, and go to state 13


State 5

    0 $accept: Program • $end

    $end  shift, and go to state 14


State 6

    1 Program: CompUnit •
    2 CompUnit: CompUnit • Decl
    3         | CompUnit • FuncDef

    CONST   shift, and go to state 1
    INTT    shift, and go to state 2
    FLOATT  shift, and go to state 3
    VOID    shift, and go to state 4

    $default  reduce using rule 1 (Program)

    Decl       go to state 15
    ConstDecl  go to state 8
    BType      go to state 9
    VarDecl    go to state 10
    FuncDef    go to state 16


State 7

    4 CompUnit: Decl •

    $default  reduce using rule 4 (CompUnit)


State 8

    6 Decl: ConstDecl • SEMICOLON
    9 ConstDecl: ConstDecl • COMMA ConstDef

    COMMA      shift, and go to state 17
    SEMICOLON  shift, and go to state 18


State 9

   23 VarDecl: BType • VarDef
   36 FuncDef: BType • IDENT LPAREN FuncFParams RPAREN Block
   37        | BType • IDENT LPAREN RPAREN Block

    IDENT  shift, and go to state 19

    VarDef  go to state 20


State 10

    7 Decl: VarDecl • SEMICOLON
   24 VarDecl: VarDecl • COMMA VarDef

    COMMA      shift, and go to state 21
    SEMICOLON  shift, and go to state 22


State 11

    5 CompUnit: FuncDef •

    $default  reduce using rule 5 (CompUnit)


State 12

    8 ConstDecl: CONST BType • ConstDef

    IDENT  shift, and go to state 23

    ConstDef  go to state 24


State 13

   38 FuncDef: VOID IDENT • LPAREN FuncFParams RPAREN Block
   39        | VOID IDENT • LPAREN RPAREN Block

    LPAREN  shift, and go to state 25


State 14

    0 $accept: Program $end •

    $default  accept


State 15

    2 CompUnit: CompUnit Decl •

    $default  reduce using rule 2 (CompUnit)


State 16

    3 CompUnit: CompUnit FuncDef •

    $default  reduce using rule 3 (CompUnit)


State 17

    9 ConstDecl: ConstDecl COMMA • ConstDef

    IDENT  shift, and go to state 23

    ConstDef  go to state 26


State 18

    6 Decl: ConstDecl SEMICOLON •

    $default  reduce using rule 6 (Decl)


State 19

   25 VarDef: IDENT •
   26       | IDENT • ArrayOpt
   27       | IDENT • ASSIGNN InitVal
   28       | IDENT • ArrayOpt InitArray
   36 FuncDef: BType IDENT • LPAREN FuncFParams RPAREN Block
   37        | BType IDENT • LPAREN RPAREN Block

    LBRACKET  shift, and go to state 27
    LPAREN    shift, and go to state 28
    ASSIGNN   shift, and go to state 29

    $default  reduce using rule 25 (VarDef)

    ArrayOpt  go to state 30


State 20

   23 VarDecl: BType VarDef •

    $default  reduce using rule 23 (VarDecl)


State 21

   24 VarDecl: VarDecl COMMA • VarDef

    IDENT  shift, and go to state 31

    VarDef  go to state 32


State 22

    7 Decl: VarDecl SEMICOLON •

    $default  reduce using rule 7 (Decl)


State 23

   12 ConstDef: IDENT • ASSIGNN ConstInitVal
   13         | IDENT • ArrayOpt ASSIGNN ConstInitArray

    LBRACKET  shift, and go to state 27
    ASSIGNN   shift, and go to state 33

    ArrayOpt  go to state 34


State 24

    8 ConstDecl: CONST BType ConstDef •

    $default  reduce using rule 8 (ConstDecl)


State 25

   38 FuncDef: VOID IDENT LPAREN • FuncFParams RPAREN Block
   39        | VOID IDENT LPAREN • RPAREN Block

    INTT    shift, and go to state 2
    FLOATT  shift, and go to state 3
    RPAREN  shift, and go to state 35

    BType        go to state 36
    FuncFParams  go to state 37
    FuncFParam   go to state 38


State 26

    9 ConstDecl: ConstDecl COMMA ConstDef •

    $default  reduce using rule 9 (ConstDecl)


State 27

   14 ArrayOpt: LBRACKET • ConstExp RBRACKET

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    LPAREN       shift, and go to state 42
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    LVal        go to state 46
    PrimaryExp  go to state 47
    Number      go to state 48
    UnaryExp    go to state 49
    FuncCall    go to state 50
    UnaryOp     go to state 51
    MulExp      go to state 52
    AddExp      go to state 53
    ConstExp    go to state 54


State 28

   36 FuncDef: BType IDENT LPAREN • FuncFParams RPAREN Block
   37        | BType IDENT LPAREN • RPAREN Block

    INTT    shift, and go to state 2
    FLOATT  shift, and go to state 3
    RPAREN  shift, and go to state 55

    BType        go to state 36
    FuncFParams  go to state 56
    FuncFParam   go to state 38


State 29

   27 VarDef: IDENT ASSIGNN • InitVal

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    LPAREN       shift, and go to state 42
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    InitVal     go to state 57
    Exp         go to state 58
    LVal        go to state 46
    PrimaryExp  go to state 47
    Number      go to state 48
    UnaryExp    go to state 49
    FuncCall    go to state 50
    UnaryOp     go to state 51
    MulExp      go to state 52
    AddExp      go to state 59


State 30

   15 ArrayOpt: ArrayOpt • LBRACKET ConstExp RBRACKET
   26 VarDef: IDENT ArrayOpt •
   28       | IDENT ArrayOpt • InitArray

    LBRACE    shift, and go to state 60
    LBRACKET  shift, and go to state 61

    $default  reduce using rule 26 (VarDef)

    InitArray  go to state 62


State 31

   25 VarDef: IDENT •
   26       | IDENT • ArrayOpt
   27       | IDENT • ASSIGNN InitVal
   28       | IDENT • ArrayOpt InitArray

    LBRACKET  shift, and go to state 27
    ASSIGNN   shift, and go to state 29

    $default  reduce using rule 25 (VarDef)

    ArrayOpt  go to state 30


State 32

   24 VarDecl: VarDecl COMMA VarDef •

    $default  reduce using rule 24 (VarDecl)


State 33

   12 ConstDef: IDENT ASSIGNN • ConstInitVal

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    LPAREN       shift, and go to state 42
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    ConstInitVal  go to state 63
    LVal          go to state 46
    PrimaryExp    go to state 47
    Number        go to state 48
    UnaryExp      go to state 49
    FuncCall      go to state 50
    UnaryOp       go to state 51
    MulExp        go to state 52
    AddExp        go to state 53
    ConstExp      go to state 64


State 34

   13 ConstDef: IDENT ArrayOpt • ASSIGNN ConstInitArray
   15 ArrayOpt: ArrayOpt • LBRACKET ConstExp RBRACKET

    LBRACKET  shift, and go to state 61
    ASSIGNN   shift, and go to state 65


State 35

   39 FuncDef: VOID IDENT LPAREN RPAREN • Block

    LBRACE  shift, and go to state 66

    Block  go to state 67


State 36

   42 FuncFParam: BType • IDENT
   43           | BType • IDENT ArrayOpt

    IDENT  shift, and go to state 68


State 37

   38 FuncDef: VOID IDENT LPAREN FuncFParams • RPAREN Block

    RPAREN  shift, and go to state 69


State 38

   40 FuncFParams: FuncFParam • COMMA FuncFParam
   41            | FuncFParam •

    COMMA  shift, and go to state 70

    $default  reduce using rule 41 (FuncFParams)


State 39

   68 LVal: IDENT •
   78 FuncCall: IDENT • LPAREN FuncRParams RPAREN
   79         | IDENT • LPAREN RPAREN

    LPAREN  shift, and go to state 71

    $default  reduce using rule 68 (LVal)


State 40

   73 Number: INT_CONST •

    $default  reduce using rule 73 (Number)


State 41

   74 Number: FLOAT_CONST •

    $default  reduce using rule 74 (Number)


State 42

   70 PrimaryExp: LPAREN • Exp RPAREN

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    LPAREN       shift, and go to state 42
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    Exp         go to state 72
    LVal        go to state 46
    PrimaryExp  go to state 47
    Number      go to state 48
    UnaryExp    go to state 49
    FuncCall    go to state 50
    UnaryOp     go to state 51
    MulExp      go to state 52
    AddExp      go to state 59


State 43

   80 UnaryOp: ADDD •

    $default  reduce using rule 80 (UnaryOp)


State 44

   81 UnaryOp: SUBB •

    $default  reduce using rule 81 (UnaryOp)


State 45

   82 UnaryOp: NOTT •

    $default  reduce using rule 82 (UnaryOp)


State 46

   69 LVal: LVal • LBRACKET Exp RBRACKET
   71 PrimaryExp: LVal •

    LBRACKET  shift, and go to state 73

    $default  reduce using rule 71 (PrimaryExp)


State 47

   75 UnaryExp: PrimaryExp •

    $default  reduce using rule 75 (UnaryExp)


State 48

   72 PrimaryExp: Number •

    $default  reduce using rule 72 (PrimaryExp)


State 49

   85 MulExp: UnaryExp •

    $default  reduce using rule 85 (MulExp)


State 50

   76 UnaryExp: FuncCall •

    $default  reduce using rule 76 (UnaryExp)


State 51

   77 UnaryExp: UnaryOp • UnaryExp

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    LPAREN       shift, and go to state 42
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    LVal        go to state 46
    PrimaryExp  go to state 47
    Number      go to state 48
    UnaryExp    go to state 74
    FuncCall    go to state 50
    UnaryOp     go to state 51


State 52

   86 MulExp: MulExp • MulOp UnaryExp
   90 AddExp: MulExp •

    MULL  shift, and go to state 75
    DIVV  shift, and go to state 76
    MODD  shift, and go to state 77

    $default  reduce using rule 90 (AddExp)

    MulOp  go to state 78


State 53

   91 AddExp: AddExp • AddOp MulExp
  107 ConstExp: AddExp •

    ADDD  shift, and go to state 79
    SUBB  shift, and go to state 80

    $default  reduce using rule 107 (ConstExp)

    AddOp  go to state 81


State 54

   14 ArrayOpt: LBRACKET ConstExp • RBRACKET

    RBRACKET  shift, and go to state 82


State 55

   37 FuncDef: BType IDENT LPAREN RPAREN • Block

    LBRACE  shift, and go to state 66

    Block  go to state 83


State 56

   36 FuncDef: BType IDENT LPAREN FuncFParams • RPAREN Block

    RPAREN  shift, and go to state 84


State 57

   27 VarDef: IDENT ASSIGNN InitVal •

    $default  reduce using rule 27 (VarDef)


State 58

   29 InitVal: Exp •

    $default  reduce using rule 29 (InitVal)


State 59

   66 Exp: AddExp •
   91 AddExp: AddExp • AddOp MulExp

    ADDD  shift, and go to state 79
    SUBB  shift, and go to state 80

    $default  reduce using rule 66 (Exp)

    AddOp  go to state 81


State 60

   30 InitArray: LBRACE • RBRACE
   31          | LBRACE • InitArrayBody RBRACE

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    LBRACE       shift, and go to state 60
    RBRACE       shift, and go to state 85
    LPAREN       shift, and go to state 42
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    InitVal        go to state 86
    InitArray      go to state 87
    InitArrayBody  go to state 88
    Exp            go to state 58
    LVal           go to state 46
    PrimaryExp     go to state 47
    Number         go to state 48
    UnaryExp       go to state 49
    FuncCall       go to state 50
    UnaryOp        go to state 51
    MulExp         go to state 52
    AddExp         go to state 59


State 61

   15 ArrayOpt: ArrayOpt LBRACKET • ConstExp RBRACKET

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    LPAREN       shift, and go to state 42
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    LVal        go to state 46
    PrimaryExp  go to state 47
    Number      go to state 48
    UnaryExp    go to state 49
    FuncCall    go to state 50
    UnaryOp     go to state 51
    MulExp      go to state 52
    AddExp      go to state 53
    ConstExp    go to state 89


State 62

   28 VarDef: IDENT ArrayOpt InitArray •

    $default  reduce using rule 28 (VarDef)


State 63

   12 ConstDef: IDENT ASSIGNN ConstInitVal •

    $default  reduce using rule 12 (ConstDef)


State 64

   16 ConstInitVal: ConstExp •

    $default  reduce using rule 16 (ConstInitVal)


State 65

   13 ConstDef: IDENT ArrayOpt ASSIGNN • ConstInitArray

    LBRACE  shift, and go to state 90

    ConstInitArray  go to state 91


State 66

   44 Block: LBRACE • BlockItems RBRACE
   45      | LBRACE • RBRACE

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    CONST        shift, and go to state 1
    INTT         shift, and go to state 2
    FLOATT       shift, and go to state 3
    SEMICOLON    shift, and go to state 92
    LBRACE       shift, and go to state 66
    RBRACE       shift, and go to state 93
    LPAREN       shift, and go to state 42
    IF           shift, and go to state 94
    WHILE        shift, and go to state 95
    BREAK        shift, and go to state 96
    CONTINUE     shift, and go to state 97
    RETURN       shift, and go to state 98
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    Decl          go to state 99
    ConstDecl     go to state 8
    BType         go to state 100
    VarDecl       go to state 10
    Block         go to state 101
    BlockItems    go to state 102
    BlockItem     go to state 103
    Stmt          go to state 104
    IfStmt        go to state 105
    WhileStmt     go to state 106
    BreakStmt     go to state 107
    ContinueStmt  go to state 108
    ReturnStmt    go to state 109
    Exp           go to state 110
    LVal          go to state 111
    PrimaryExp    go to state 47
    Number        go to state 48
    UnaryExp      go to state 49
    FuncCall      go to state 50
    UnaryOp       go to state 51
    MulExp        go to state 52
    AddExp        go to state 59


State 67

   39 FuncDef: VOID IDENT LPAREN RPAREN Block •

    $default  reduce using rule 39 (FuncDef)


State 68

   42 FuncFParam: BType IDENT •
   43           | BType IDENT • ArrayOpt

    LBRACKET  shift, and go to state 27

    $default  reduce using rule 42 (FuncFParam)

    ArrayOpt  go to state 112


State 69

   38 FuncDef: VOID IDENT LPAREN FuncFParams RPAREN • Block

    LBRACE  shift, and go to state 66

    Block  go to state 113


State 70

   40 FuncFParams: FuncFParam COMMA • FuncFParam

    INTT    shift, and go to state 2
    FLOATT  shift, and go to state 3

    BType       go to state 36
    FuncFParam  go to state 114


State 71

   78 FuncCall: IDENT LPAREN • FuncRParams RPAREN
   79         | IDENT LPAREN • RPAREN

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    LPAREN       shift, and go to state 42
    RPAREN       shift, and go to state 115
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    Exp          go to state 116
    LVal         go to state 46
    PrimaryExp   go to state 47
    Number       go to state 48
    UnaryExp     go to state 49
    FuncCall     go to state 50
    UnaryOp      go to state 51
    FuncRParams  go to state 117
    MulExp       go to state 52
    AddExp       go to state 59


State 72

   70 PrimaryExp: LPAREN Exp • RPAREN

    RPAREN  shift, and go to state 118


State 73

   69 LVal: LVal LBRACKET • Exp RBRACKET

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    LPAREN       shift, and go to state 42
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    Exp         go to state 119
    LVal        go to state 46
    PrimaryExp  go to state 47
    Number      go to state 48
    UnaryExp    go to state 49
    FuncCall    go to state 50
    UnaryOp     go to state 51
    MulExp      go to state 52
    AddExp      go to state 59


State 74

   77 UnaryExp: UnaryOp UnaryExp •

    $default  reduce using rule 77 (UnaryExp)


State 75

   87 MulOp: MULL •

    $default  reduce using rule 87 (MulOp)


State 76

   88 MulOp: DIVV •

    $default  reduce using rule 88 (MulOp)


State 77

   89 MulOp: MODD •

    $default  reduce using rule 89 (MulOp)


State 78

   86 MulExp: MulExp MulOp • UnaryExp

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    LPAREN       shift, and go to state 42
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    LVal        go to state 46
    PrimaryExp  go to state 47
    Number      go to state 48
    UnaryExp    go to state 120
    FuncCall    go to state 50
    UnaryOp     go to state 51


State 79

   92 AddOp: ADDD •

    $default  reduce using rule 92 (AddOp)


State 80

   93 AddOp: SUBB •

    $default  reduce using rule 93 (AddOp)


State 81

   91 AddExp: AddExp AddOp • MulExp

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    LPAREN       shift, and go to state 42
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    LVal        go to state 46
    PrimaryExp  go to state 47
    Number      go to state 48
    UnaryExp    go to state 49
    FuncCall    go to state 50
    UnaryOp     go to state 51
    MulExp      go to state 121


State 82

   14 ArrayOpt: LBRACKET ConstExp RBRACKET •

    $default  reduce using rule 14 (ArrayOpt)


State 83

   37 FuncDef: BType IDENT LPAREN RPAREN Block •

    $default  reduce using rule 37 (FuncDef)


State 84

   36 FuncDef: BType IDENT LPAREN FuncFParams RPAREN • Block

    LBRACE  shift, and go to state 66

    Block  go to state 122


State 85

   30 InitArray: LBRACE RBRACE •

    $default  reduce using rule 30 (InitArray)


State 86

   35 InitArrayBody: InitVal •

    $default  reduce using rule 35 (InitArrayBody)


State 87

   34 InitArrayBody: InitArray •

    $default  reduce using rule 34 (InitArrayBody)


State 88

   31 InitArray: LBRACE InitArrayBody • RBRACE
   32 InitArrayBody: InitArrayBody • COMMA InitArray
   33              | InitArrayBody • COMMA InitVal

    COMMA   shift, and go to state 123
    RBRACE  shift, and go to state 124


State 89

   15 ArrayOpt: ArrayOpt LBRACKET ConstExp • RBRACKET

    RBRACKET  shift, and go to state 125


State 90

   17 ConstInitArray: LBRACE • RBRACE
   18               | LBRACE • ConstArrayBody RBRACE

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    LBRACE       shift, and go to state 90
    RBRACE       shift, and go to state 126
    LPAREN       shift, and go to state 42
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    ConstInitVal    go to state 127
    ConstInitArray  go to state 128
    ConstArrayBody  go to state 129
    LVal            go to state 46
    PrimaryExp      go to state 47
    Number          go to state 48
    UnaryExp        go to state 49
    FuncCall        go to state 50
    UnaryOp         go to state 51
    MulExp          go to state 52
    AddExp          go to state 53
    ConstExp        go to state 64


State 91

   13 ConstDef: IDENT ArrayOpt ASSIGNN ConstInitArray •

    $default  reduce using rule 13 (ConstDef)


State 92

   52 Stmt: SEMICOLON •

    $default  reduce using rule 52 (Stmt)


State 93

   45 Block: LBRACE RBRACE •

    $default  reduce using rule 45 (Block)


State 94

   59 IfStmt: IF • LPAREN Cond RPAREN Stmt
   60       | IF • LPAREN Cond RPAREN Stmt ELSE Stmt

    LPAREN  shift, and go to state 130


State 95

   61 WhileStmt: WHILE • LPAREN Cond RPAREN Stmt

    LPAREN  shift, and go to state 131


State 96

   62 BreakStmt: BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 132


State 97

   63 ContinueStmt: CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 133


State 98

   64 ReturnStmt: RETURN • Exp SEMICOLON
   65           | RETURN • SEMICOLON

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    SEMICOLON    shift, and go to state 134
    LPAREN       shift, and go to state 42
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    Exp         go to state 135
    LVal        go to state 46
    PrimaryExp  go to state 47
    Number      go to state 48
    UnaryExp    go to state 49
    FuncCall    go to state 50
    UnaryOp     go to state 51
    MulExp      go to state 52
    AddExp      go to state 59


State 99

   48 BlockItem: Decl •

    $default  reduce using rule 48 (BlockItem)


State 100

   23 VarDecl: BType • VarDef

    IDENT  shift, and go to state 31

    VarDef  go to state 20


State 101

   53 Stmt: Block •

    $default  reduce using rule 53 (Stmt)


State 102

   44 Block: LBRACE BlockItems • RBRACE
   47 BlockItems: BlockItems • BlockItem

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    CONST        shift, and go to state 1
    INTT         shift, and go to state 2
    FLOATT       shift, and go to state 3
    SEMICOLON    shift, and go to state 92
    LBRACE       shift, and go to state 66
    RBRACE       shift, and go to state 136
    LPAREN       shift, and go to state 42
    IF           shift, and go to state 94
    WHILE        shift, and go to state 95
    BREAK        shift, and go to state 96
    CONTINUE     shift, and go to state 97
    RETURN       shift, and go to state 98
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    Decl          go to state 99
    ConstDecl     go to state 8
    BType         go to state 100
    VarDecl       go to state 10
    Block         go to state 101
    BlockItem     go to state 137
    Stmt          go to state 104
    IfStmt        go to state 105
    WhileStmt     go to state 106
    BreakStmt     go to state 107
    ContinueStmt  go to state 108
    ReturnStmt    go to state 109
    Exp           go to state 110
    LVal          go to state 111
    PrimaryExp    go to state 47
    Number        go to state 48
    UnaryExp      go to state 49
    FuncCall      go to state 50
    UnaryOp       go to state 51
    MulExp        go to state 52
    AddExp        go to state 59


State 103

   46 BlockItems: BlockItem •

    $default  reduce using rule 46 (BlockItems)


State 104

   49 BlockItem: Stmt •

    $default  reduce using rule 49 (BlockItem)


State 105

   54 Stmt: IfStmt •

    $default  reduce using rule 54 (Stmt)


State 106

   55 Stmt: WhileStmt •

    $default  reduce using rule 55 (Stmt)


State 107

   56 Stmt: BreakStmt •

    $default  reduce using rule 56 (Stmt)


State 108

   57 Stmt: ContinueStmt •

    $default  reduce using rule 57 (Stmt)


State 109

   58 Stmt: ReturnStmt •

    $default  reduce using rule 58 (Stmt)


State 110

   51 Stmt: Exp • SEMICOLON

    SEMICOLON  shift, and go to state 138


State 111

   50 Stmt: LVal • ASSIGNN Exp SEMICOLON
   69 LVal: LVal • LBRACKET Exp RBRACKET
   71 PrimaryExp: LVal •

    LBRACKET  shift, and go to state 73
    ASSIGNN   shift, and go to state 139

    $default  reduce using rule 71 (PrimaryExp)


State 112

   15 ArrayOpt: ArrayOpt • LBRACKET ConstExp RBRACKET
   43 FuncFParam: BType IDENT ArrayOpt •

    LBRACKET  shift, and go to state 61

    $default  reduce using rule 43 (FuncFParam)


State 113

   38 FuncDef: VOID IDENT LPAREN FuncFParams RPAREN Block •

    $default  reduce using rule 38 (FuncDef)


State 114

   40 FuncFParams: FuncFParam COMMA FuncFParam •

    $default  reduce using rule 40 (FuncFParams)


State 115

   79 FuncCall: IDENT LPAREN RPAREN •

    $default  reduce using rule 79 (FuncCall)


State 116

   83 FuncRParams: Exp •

    $default  reduce using rule 83 (FuncRParams)


State 117

   78 FuncCall: IDENT LPAREN FuncRParams • RPAREN
   84 FuncRParams: FuncRParams • COMMA Exp

    COMMA   shift, and go to state 140
    RPAREN  shift, and go to state 141


State 118

   70 PrimaryExp: LPAREN Exp RPAREN •

    $default  reduce using rule 70 (PrimaryExp)


State 119

   69 LVal: LVal LBRACKET Exp • RBRACKET

    RBRACKET  shift, and go to state 142


State 120

   86 MulExp: MulExp MulOp UnaryExp •

    $default  reduce using rule 86 (MulExp)


State 121

   86 MulExp: MulExp • MulOp UnaryExp
   91 AddExp: AddExp AddOp MulExp •

    MULL  shift, and go to state 75
    DIVV  shift, and go to state 76
    MODD  shift, and go to state 77

    $default  reduce using rule 91 (AddExp)

    MulOp  go to state 78


State 122

   36 FuncDef: BType IDENT LPAREN FuncFParams RPAREN Block •

    $default  reduce using rule 36 (FuncDef)


State 123

   32 InitArrayBody: InitArrayBody COMMA • InitArray
   33              | InitArrayBody COMMA • InitVal

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    LBRACE       shift, and go to state 60
    LPAREN       shift, and go to state 42
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    InitVal     go to state 143
    InitArray   go to state 144
    Exp         go to state 58
    LVal        go to state 46
    PrimaryExp  go to state 47
    Number      go to state 48
    UnaryExp    go to state 49
    FuncCall    go to state 50
    UnaryOp     go to state 51
    MulExp      go to state 52
    AddExp      go to state 59


State 124

   31 InitArray: LBRACE InitArrayBody RBRACE •

    $default  reduce using rule 31 (InitArray)


State 125

   15 ArrayOpt: ArrayOpt LBRACKET ConstExp RBRACKET •

    $default  reduce using rule 15 (ArrayOpt)


State 126

   17 ConstInitArray: LBRACE RBRACE •

    $default  reduce using rule 17 (ConstInitArray)


State 127

   22 ConstArrayBody: ConstInitVal •

    $default  reduce using rule 22 (ConstArrayBody)


State 128

   21 ConstArrayBody: ConstInitArray •

    $default  reduce using rule 21 (ConstArrayBody)


State 129

   18 ConstInitArray: LBRACE ConstArrayBody • RBRACE
   19 ConstArrayBody: ConstArrayBody • COMMA ConstInitArray
   20               | ConstArrayBody • COMMA ConstInitVal

    COMMA   shift, and go to state 145
    RBRACE  shift, and go to state 146


State 130

   59 IfStmt: IF LPAREN • Cond RPAREN Stmt
   60       | IF LPAREN • Cond RPAREN Stmt ELSE Stmt

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    LPAREN       shift, and go to state 42
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    Cond        go to state 147
    LVal        go to state 46
    PrimaryExp  go to state 47
    Number      go to state 48
    UnaryExp    go to state 49
    FuncCall    go to state 50
    UnaryOp     go to state 51
    MulExp      go to state 52
    AddExp      go to state 148
    RelExp      go to state 149
    EqExp       go to state 150
    LAndExp     go to state 151
    LOrExp      go to state 152


State 131

   61 WhileStmt: WHILE LPAREN • Cond RPAREN Stmt

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    LPAREN       shift, and go to state 42
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    Cond        go to state 153
    LVal        go to state 46
    PrimaryExp  go to state 47
    Number      go to state 48
    UnaryExp    go to state 49
    FuncCall    go to state 50
    UnaryOp     go to state 51
    MulExp      go to state 52
    AddExp      go to state 148
    RelExp      go to state 149
    EqExp       go to state 150
    LAndExp     go to state 151
    LOrExp      go to state 152


State 132

   62 BreakStmt: BREAK SEMICOLON •

    $default  reduce using rule 62 (BreakStmt)


State 133

   63 ContinueStmt: CONTINUE SEMICOLON •

    $default  reduce using rule 63 (ContinueStmt)


State 134

   65 ReturnStmt: RETURN SEMICOLON •

    $default  reduce using rule 65 (ReturnStmt)


State 135

   64 ReturnStmt: RETURN Exp • SEMICOLON

    SEMICOLON  shift, and go to state 154


State 136

   44 Block: LBRACE BlockItems RBRACE •

    $default  reduce using rule 44 (Block)


State 137

   47 BlockItems: BlockItems BlockItem •

    $default  reduce using rule 47 (BlockItems)


State 138

   51 Stmt: Exp SEMICOLON •

    $default  reduce using rule 51 (Stmt)


State 139

   50 Stmt: LVal ASSIGNN • Exp SEMICOLON

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    LPAREN       shift, and go to state 42
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    Exp         go to state 155
    LVal        go to state 46
    PrimaryExp  go to state 47
    Number      go to state 48
    UnaryExp    go to state 49
    FuncCall    go to state 50
    UnaryOp     go to state 51
    MulExp      go to state 52
    AddExp      go to state 59


State 140

   84 FuncRParams: FuncRParams COMMA • Exp

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    LPAREN       shift, and go to state 42
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    Exp         go to state 156
    LVal        go to state 46
    PrimaryExp  go to state 47
    Number      go to state 48
    UnaryExp    go to state 49
    FuncCall    go to state 50
    UnaryOp     go to state 51
    MulExp      go to state 52
    AddExp      go to state 59


State 141

   78 FuncCall: IDENT LPAREN FuncRParams RPAREN •

    $default  reduce using rule 78 (FuncCall)


State 142

   69 LVal: LVal LBRACKET Exp RBRACKET •

    $default  reduce using rule 69 (LVal)


State 143

   33 InitArrayBody: InitArrayBody COMMA InitVal •

    $default  reduce using rule 33 (InitArrayBody)


State 144

   32 InitArrayBody: InitArrayBody COMMA InitArray •

    $default  reduce using rule 32 (InitArrayBody)


State 145

   19 ConstArrayBody: ConstArrayBody COMMA • ConstInitArray
   20               | ConstArrayBody COMMA • ConstInitVal

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    LBRACE       shift, and go to state 90
    LPAREN       shift, and go to state 42
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    ConstInitVal    go to state 157
    ConstInitArray  go to state 158
    LVal            go to state 46
    PrimaryExp      go to state 47
    Number          go to state 48
    UnaryExp        go to state 49
    FuncCall        go to state 50
    UnaryOp         go to state 51
    MulExp          go to state 52
    AddExp          go to state 53
    ConstExp        go to state 64


State 146

   18 ConstInitArray: LBRACE ConstArrayBody RBRACE •

    $default  reduce using rule 18 (ConstInitArray)


State 147

   59 IfStmt: IF LPAREN Cond • RPAREN Stmt
   60       | IF LPAREN Cond • RPAREN Stmt ELSE Stmt

    RPAREN  shift, and go to state 159


State 148

   91 AddExp: AddExp • AddOp MulExp
   94 RelExp: AddExp •

    ADDD  shift, and go to state 79
    SUBB  shift, and go to state 80

    $default  reduce using rule 94 (RelExp)

    AddOp  go to state 81


State 149

   95 RelExp: RelExp • RelOp AddExp
  100 EqExp: RelExp •

    GTT   shift, and go to state 160
    GEQQ  shift, and go to state 161
    LTT   shift, and go to state 162
    LEQQ  shift, and go to state 163

    $default  reduce using rule 100 (EqExp)

    RelOp  go to state 164


State 150

  101 EqExp: EqExp • EQQ RelExp
  102      | EqExp • NEQQ RelExp
  103 LAndExp: EqExp •

    EQQ   shift, and go to state 165
    NEQQ  shift, and go to state 166

    $default  reduce using rule 103 (LAndExp)


State 151

  104 LAndExp: LAndExp • ANDD EqExp
  105 LOrExp: LAndExp •

    ANDD  shift, and go to state 167

    $default  reduce using rule 105 (LOrExp)


State 152

   67 Cond: LOrExp •
  106 LOrExp: LOrExp • ORR LAndExp

    ORR  shift, and go to state 168

    $default  reduce using rule 67 (Cond)


State 153

   61 WhileStmt: WHILE LPAREN Cond • RPAREN Stmt

    RPAREN  shift, and go to state 169


State 154

   64 ReturnStmt: RETURN Exp SEMICOLON •

    $default  reduce using rule 64 (ReturnStmt)


State 155

   50 Stmt: LVal ASSIGNN Exp • SEMICOLON

    SEMICOLON  shift, and go to state 170


State 156

   84 FuncRParams: FuncRParams COMMA Exp •

    $default  reduce using rule 84 (FuncRParams)


State 157

   20 ConstArrayBody: ConstArrayBody COMMA ConstInitVal •

    $default  reduce using rule 20 (ConstArrayBody)


State 158

   19 ConstArrayBody: ConstArrayBody COMMA ConstInitArray •

    $default  reduce using rule 19 (ConstArrayBody)


State 159

   59 IfStmt: IF LPAREN Cond RPAREN • Stmt
   60       | IF LPAREN Cond RPAREN • Stmt ELSE Stmt

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    SEMICOLON    shift, and go to state 92
    LBRACE       shift, and go to state 66
    LPAREN       shift, and go to state 42
    IF           shift, and go to state 94
    WHILE        shift, and go to state 95
    BREAK        shift, and go to state 96
    CONTINUE     shift, and go to state 97
    RETURN       shift, and go to state 98
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    Block         go to state 101
    Stmt          go to state 171
    IfStmt        go to state 105
    WhileStmt     go to state 106
    BreakStmt     go to state 107
    ContinueStmt  go to state 108
    ReturnStmt    go to state 109
    Exp           go to state 110
    LVal          go to state 111
    PrimaryExp    go to state 47
    Number        go to state 48
    UnaryExp      go to state 49
    FuncCall      go to state 50
    UnaryOp       go to state 51
    MulExp        go to state 52
    AddExp        go to state 59


State 160

   96 RelOp: GTT •

    $default  reduce using rule 96 (RelOp)


State 161

   97 RelOp: GEQQ •

    $default  reduce using rule 97 (RelOp)


State 162

   98 RelOp: LTT •

    $default  reduce using rule 98 (RelOp)


State 163

   99 RelOp: LEQQ •

    $default  reduce using rule 99 (RelOp)


State 164

   95 RelExp: RelExp RelOp • AddExp

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    LPAREN       shift, and go to state 42
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    LVal        go to state 46
    PrimaryExp  go to state 47
    Number      go to state 48
    UnaryExp    go to state 49
    FuncCall    go to state 50
    UnaryOp     go to state 51
    MulExp      go to state 52
    AddExp      go to state 172


State 165

  101 EqExp: EqExp EQQ • RelExp

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    LPAREN       shift, and go to state 42
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    LVal        go to state 46
    PrimaryExp  go to state 47
    Number      go to state 48
    UnaryExp    go to state 49
    FuncCall    go to state 50
    UnaryOp     go to state 51
    MulExp      go to state 52
    AddExp      go to state 148
    RelExp      go to state 173


State 166

  102 EqExp: EqExp NEQQ • RelExp

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    LPAREN       shift, and go to state 42
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    LVal        go to state 46
    PrimaryExp  go to state 47
    Number      go to state 48
    UnaryExp    go to state 49
    FuncCall    go to state 50
    UnaryOp     go to state 51
    MulExp      go to state 52
    AddExp      go to state 148
    RelExp      go to state 174


State 167

  104 LAndExp: LAndExp ANDD • EqExp

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    LPAREN       shift, and go to state 42
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    LVal        go to state 46
    PrimaryExp  go to state 47
    Number      go to state 48
    UnaryExp    go to state 49
    FuncCall    go to state 50
    UnaryOp     go to state 51
    MulExp      go to state 52
    AddExp      go to state 148
    RelExp      go to state 149
    EqExp       go to state 175


State 168

  106 LOrExp: LOrExp ORR • LAndExp

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    LPAREN       shift, and go to state 42
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    LVal        go to state 46
    PrimaryExp  go to state 47
    Number      go to state 48
    UnaryExp    go to state 49
    FuncCall    go to state 50
    UnaryOp     go to state 51
    MulExp      go to state 52
    AddExp      go to state 148
    RelExp      go to state 149
    EqExp       go to state 150
    LAndExp     go to state 176


State 169

   61 WhileStmt: WHILE LPAREN Cond RPAREN • Stmt

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    SEMICOLON    shift, and go to state 92
    LBRACE       shift, and go to state 66
    LPAREN       shift, and go to state 42
    IF           shift, and go to state 94
    WHILE        shift, and go to state 95
    BREAK        shift, and go to state 96
    CONTINUE     shift, and go to state 97
    RETURN       shift, and go to state 98
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    Block         go to state 101
    Stmt          go to state 177
    IfStmt        go to state 105
    WhileStmt     go to state 106
    BreakStmt     go to state 107
    ContinueStmt  go to state 108
    ReturnStmt    go to state 109
    Exp           go to state 110
    LVal          go to state 111
    PrimaryExp    go to state 47
    Number        go to state 48
    UnaryExp      go to state 49
    FuncCall      go to state 50
    UnaryOp       go to state 51
    MulExp        go to state 52
    AddExp        go to state 59


State 170

   50 Stmt: LVal ASSIGNN Exp SEMICOLON •

    $default  reduce using rule 50 (Stmt)


State 171

   59 IfStmt: IF LPAREN Cond RPAREN Stmt •
   60       | IF LPAREN Cond RPAREN Stmt • ELSE Stmt

    ELSE  shift, and go to state 178

    $default  reduce using rule 59 (IfStmt)


State 172

   91 AddExp: AddExp • AddOp MulExp
   95 RelExp: RelExp RelOp AddExp •

    ADDD  shift, and go to state 79
    SUBB  shift, and go to state 80

    $default  reduce using rule 95 (RelExp)

    AddOp  go to state 81


State 173

   95 RelExp: RelExp • RelOp AddExp
  101 EqExp: EqExp EQQ RelExp •

    GTT   shift, and go to state 160
    GEQQ  shift, and go to state 161
    LTT   shift, and go to state 162
    LEQQ  shift, and go to state 163

    $default  reduce using rule 101 (EqExp)

    RelOp  go to state 164


State 174

   95 RelExp: RelExp • RelOp AddExp
  102 EqExp: EqExp NEQQ RelExp •

    GTT   shift, and go to state 160
    GEQQ  shift, and go to state 161
    LTT   shift, and go to state 162
    LEQQ  shift, and go to state 163

    $default  reduce using rule 102 (EqExp)

    RelOp  go to state 164


State 175

  101 EqExp: EqExp • EQQ RelExp
  102      | EqExp • NEQQ RelExp
  104 LAndExp: LAndExp ANDD EqExp •

    EQQ   shift, and go to state 165
    NEQQ  shift, and go to state 166

    $default  reduce using rule 104 (LAndExp)


State 176

  104 LAndExp: LAndExp • ANDD EqExp
  106 LOrExp: LOrExp ORR LAndExp •

    ANDD  shift, and go to state 167

    $default  reduce using rule 106 (LOrExp)


State 177

   61 WhileStmt: WHILE LPAREN Cond RPAREN Stmt •

    $default  reduce using rule 61 (WhileStmt)


State 178

   60 IfStmt: IF LPAREN Cond RPAREN Stmt ELSE • Stmt

    IDENT        shift, and go to state 39
    INT_CONST    shift, and go to state 40
    FLOAT_CONST  shift, and go to state 41
    SEMICOLON    shift, and go to state 92
    LBRACE       shift, and go to state 66
    LPAREN       shift, and go to state 42
    IF           shift, and go to state 94
    WHILE        shift, and go to state 95
    BREAK        shift, and go to state 96
    CONTINUE     shift, and go to state 97
    RETURN       shift, and go to state 98
    ADDD         shift, and go to state 43
    SUBB         shift, and go to state 44
    NOTT         shift, and go to state 45

    Block         go to state 101
    Stmt          go to state 179
    IfStmt        go to state 105
    WhileStmt     go to state 106
    BreakStmt     go to state 107
    ContinueStmt  go to state 108
    ReturnStmt    go to state 109
    Exp           go to state 110
    LVal          go to state 111
    PrimaryExp    go to state 47
    Number        go to state 48
    UnaryExp      go to state 49
    FuncCall      go to state 50
    UnaryOp       go to state 51
    MulExp        go to state 52
    AddExp        go to state 59


State 179

   60 IfStmt: IF LPAREN Cond RPAREN Stmt ELSE Stmt •

    $default  reduce using rule 60 (IfStmt)
